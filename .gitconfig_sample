#customize your
#   user.name
#   user.email
#   alias.mynikname
[user]
  name = your_name
  email = your@mail
[alias]
  mynikname = "! f() {          \
    nikname='yournik'            \
    ;echo $nikname              \
  ;}; f"

  myname = "! echo $(git config user.name | tr -d '\n')"
  myallname = "! echo $(git mynikname)'|'$(git myname)"

#Check labels in sources. Useful look for nikname, f.e. in comments 
  mycheck = "! f() {                  \
    allname=$(git mynik);             \
    echo Find nikname in sources $allname;                    \
    git grep -nEe \"${allname}\"      \
  ;}; f "

  st = status
  co = checkout
  ci = commit
  amend = commit --amend -C HEAD
  ins = ! git add -- $@ && git status
  br = branch
  rb = rebase
  rbi = rebase -i
  ch = cherry-pick
  type = cat-file -t
  dump = cat-file -p
  unstage = ! git reset HEAD -- $@ 
  hist  = log         --pretty=format:\"%C(green)%h %C(yellow)%ad%C(cyan)%d%Creset | %s %C(black bold)[%an]%Creset \" --graph --date=short --decorate
  hist2 = log         --pretty=format:\"%C(green)%h %C(yellow)%ad%Creset | %s %C(black bold)[%an]%Creset \" --graph --date=short --decorate
  last  = log         --pretty=format:\"%C(green)%h %C(yellow)%ad%C(cyan)%d%Creset | %s %C(black bold)[%an]%Creset \" --graph --date=short --decorate -20
  sshow = show --stat --pretty=format:\"%C(green)%h %C(yellow)%ad%C(cyan)%d%Creset | %s %C(black bold)[%an]%Creset \" --graph --date=short --decorate --no-notes
  visual = !gitk --all &

# see gitignore: git gi list
  gi = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"

#Show log for current user sorted by date
  mylogsort = "! f() { \
    git mylog $@ | sort --key=3,3 -r \
  ;}; f $@"

  mylog = "! f() { \
    allname=$(git myallname); \
    name=$(git myname); \
    nik=$(git mynikname); \
    echo Log of user \"'$allname'\" sorted by date; \
    git hist2 $@ | grep -i -E \"${allname}\" | sed \"s/\\[${name}\\]//i\" | sed \"s/\\[${nik}\\]//i\" \
  ;}; f $@"

  df = diff
  df0 = diff -U0
  dfc = diff --cached
  lg = log -p
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ls = ls-files
# Show files ignored by git:
  ign = ls-files -o -i --exclude-standard
#  to see the list of the ignored files.
  ignored = !git ls-files -v | grep ^[a-z]
# temporarily ignoring file
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  merged = branch --merged
  unmerged = branch --no-merged

fsckclear = "! f(){ \
    echo "= git fsck"                                             && git fsck \
    && echo "= git reflog expire --expire-unreachable=now --all"  && git reflog expire --expire-unreachable=now --all \
    && echo "= git gc --prune prunefsck"                          && git gc --prune=now \
    && echo "= git fsck"                                          && git fsck ;}; f"

##########################
### my worlflow useful
##########################

pushall      = ! echo "=  pushall"         && git push --all origin
pushallforce = ! echo "=  pushallforce"    && git push --all --force origin

copy2tmp = "! f(){ \
 user=$(git mynikname) \
 && tmpbranch=tmp_${user} \
 && cbr=$(git rev-parse --abbrev-ref HEAD) \
 && echo "=   copy2tmp" \
 && echo "==  copy2tmp 1: git add ."                                      && git add . \
 && echo "==  copy2tmp 2: git ci -am 'tmp_'${cbr}_$(date +%y%m%d_%H%M%S)" && git ci -am 'tmp_'${cbr}_$(date +%y%m%d_%H%M%S) \
 && echo "==  copy2tmp 3: git push -f origin $cbr:$tmpbranch"             && git push -f origin $cbr:$tmpbranch \
 && echo "==  copy2tmp 4: git reset HEAD~1"                               && git reset HEAD~1 \
 && echo '---------------' \
 && git st ;}; f"

backupcfg = "! f(){ \
 user=$(git mynikname) \
 && cfg=${1:-cfg} \
 && tmpbranch=${cfg}_${user} \
 && cbr=cfg \
 && echo "=   backupcfg" \
 && echo "==  backupcfg 1: git push -f origin $cbr:$tmpbranch" && git push -f origin $cbr:$tmpbranch \
 && echo '---------------' \
 && git st ;}; f"


# Загрузить свои изменения в ветку master из ветки fix, исключая коммиты ветки cfg. Стать на ветку мастер.
load = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  load $fix $cfg $master " \
 && echo "== load 1: git co $fix"                      && git co $fix \
 && echo "== load 2: git rb --onto $master $cfg $fix"  && git rb --onto $master $cfg $fix  \
 && echo "== load 3: git co $master"                   && git co $master \
 && echo "== load 4: git rebase $fix $master"          && git rebase $fix $master ;}; f"

# Обновить master из origin. Залить изменения из fix и cfg. Вернуться в fix.
update = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  update ${fix} ${cfg} ${master} " \
 && echo "== update 1: git co $master"      && git co $master  \
 && echo "== update 2: git pull --rebase"   && git pull --rebase origin $master \
 && echo "== update 3: git rb $master $cfg" && git rb $master $cfg \
 && echo "== update 4: git rb $cfg $fix"    && git rb $cfg $fix ;}; f"

# Обновить master из origin. Залить изменения из fix в master. Отправить мастер в origin. Сделать бекап cfg, Вернуться в fix.
upload = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  upload $fix $cfg $master " \
 && echo "== upload 1: "                                && git update $fix $cfg $master \
 && echo "== upload 2: "                                && git load $fix $cfg $master \
 && echo "== upload 3: git push origin $master:$master" && git push origin $master:$master \
 && echo "== upload 4: "                                && git update $fix $cfg $master \
 && echo "== upload 5: git backupcfg"                   && git backupcfg \
 && echo "== update 6: git co $fix"                     && git co $fix   \
 && echo "=====" && git last ;}; f"

##########################
### git-svn useful
##########################

svnlog = !git svn log --oneline -20 | sort
svndcommit   = ! echo "=  git svn dcommit" && git svn dcommit

uploadsvn = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  uploadsvn $fix $cfg $master " \
 && git pushallforce \
 && git updatesvn $fix $cfg $master \
 && git loadsvn $fix $cfg $master \
 && git svndcommit \
 && git updatesvn $fix $cfg $master  \
 && git pushallforce \
 && echo "=====" && git last \
 && echo "=====" && git svnlog ;}; f"

updatesvn = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  updatesvn ${fix} ${cfg} ${master} " \
 && echo "== git co $master"       && git co $master  \
 && echo "== git svn rebase"       && git svn rebase \
 && echo "== git rb $master $cfg"  && git rb $master $cfg \
 && echo "== git rb $cfg $fix"     && git rb $cfg $fix ;}; f"

loadsvn = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  loadsvn $fix $cfg $master " \
 && echo "== git co $fix"                      && git co $fix \
 && echo "== git rb --onto $master $cfg $fix"  && git rb --onto $master $cfg $fix  \
 && echo "== git co $master"                   && git co $master \
 && echo "== git rebase $fix $master"          && git rebase $fix $master ;}; f"

##########################

[commit]
	template = /home/yournik/.gitmessage_template
[color]
	ui = true
	status = true
	diff = true
	branch = true
	interactive = true
	pager = true
	grep = true
[color "log"]
    current = green    
    local = yellow
    remote = green reverse
[color "branch"]
    current = green    
    local = yellow
    remote = green reverse
[color "diff"]
    commit = yellow bold 
    meta = normal bold
    frag = magenta bold
    old = red
    new = green
    whitespace = red reverse blink
    plain = normal
    func = normal
[color "status"]
    added = green
    changed = yellow
    untracked = cyan
[core]
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    pager = less -FXRS
	editor = mcedit
	autocrlf = false
	safecrlf = false
	eol = native
#    FOR WIN
#    pager = more
#    git config --global core.autocrlf true
#    git config --global core.safecrlf true
[blame]
	data = short
[gui]
	spellingdictionary = en_GB
[merge]
	tool = kdiff3
    guitool = kdiff3
[diff]
	tool = kdiff3
	guitool = kdiff3
[difftool]
	prompt = false
[mergetool]
	prompt = true
[help]
    autocorrect = 1
[http]
	sslverify = false
[push]
    default = upstream